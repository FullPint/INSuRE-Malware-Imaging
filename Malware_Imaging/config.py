# Standard Library Imports
import os
import glob

# Defining Base Directories
BASE_DIRECTORIES = {"ROOT_DIR": os.path.dirname(os.path.abspath(__file__))}
BASE_DIRECTORIES["PROJECT_DIR"] = os.path.abspath(
    os.path.join(BASE_DIRECTORIES["ROOT_DIR"], "project")
)
BASE_DIRECTORIES["SAMPLES_ROOT"] = os.path.abspath(
    os.path.join(BASE_DIRECTORIES["ROOT_DIR"], "../../samples/")
)

# Defining Data Directories
DATA_DIRECTORIES = {
    "BIN_DIR": os.path.abspath(
        os.path.join(BASE_DIRECTORIES["SAMPLES_ROOT"], "m-binaries")
    ),
    "DUMPS_DIR": os.path.abspath(
        os.path.join(BASE_DIRECTORIES["SAMPLES_ROOT"], "dumps")
    ),
    "LABELS": os.path.abspath(
        os.path.join(["SAMPLES_ROOT"], "stratified-random-sampling-imaging.csv")
    ),
}
DATA_DIRECTORIES["DEC_DIR"] = os.path.abspath(
    os.path.join(DATA_DIRECTORIES["DUMPS_DIR"], "dec")
)
DATA_DIRECTORIES["HEX_DIR"] = os.path.abspath(
    os.path.join(DATA_DIRECTORIES["DUMPS_DIR"], "hex")
)
DATA_DIRECTORIES["DEC_FILES"] = glob.glob(DATA_DIRECTORIES["DEC_DIR"] + "/*.dump")

# Defining Image Directories
IMAGE_DIRECTORIES = {
    "BASE_IMAGE_DIR": os.path.abspath(
        os.path.join(BASE_DIRECTORIES["ROOT_DIR"], "images")
    )
}
IMAGE_DIRECTORIES["DEC_IMAGE_DIR"] = os.path.join(
    IMAGE_DIRECTORIES["BASE_IMAGE_DIR"] + "/hex_to_dec_images"
)

IMAGE_DIRECTORIES["TARGET_FILE_NAMES"] = [
    os.path.splitext(os.path.basename(name))[0]
    for name in DATA_DIRECTORIES["DEC_FILES"]
]

IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"] = [
    os.path.join(IMAGE_DIRECTORIES["DEC_IMAGE_DIR"], name) + ".png"
    for name in IMAGE_DIRECTORIES["TARGET_FILE_NAMES"]
]

# Spectral Image Directoriess
SPECTRAL_DIRECTORIES = {
    "SPRECTRAL_IMAGE_DIR": os.path.join(
        IMAGE_DIRECTORIES["BASE_IMAGE_DIR"] + "/spectral_images"
    )
}

SPECTRAL_DIRECTORIES["SPECTRAL_IMAGE_PATHS"] = [
    os.path.join(SPECTRAL_DIRECTORIES["SPRECTRAL_IMAGE_DIR"], name) + ".png"
    for name in IMAGE_DIRECTORIES["TARGET_FILE_NAMES"]
]

# Saved Models Directories
MODEL_DIRECTORIES = {
    "SAVED_MODELS_DIR": os.path.join(
        BASE_DIRECTORIES["PROJECT_DIR"], "models/saved_models"
    )
}

# Defining Image Widths used to produce the original Images
# The key is the size of the dump, and the value is the width
# neccesary for the size. The last key is arbitrary given that
# it will be used for all sizes greater than 999
IMAGE_WIDTHS = dict(
    [
        (9, 32),
        (29, 64),
        (59, 128),
        (99, 256),
        (199, 384),
        (499, 512),
        (999, 768),
        (1024, 1024),
    ]
)


def get_image_width(file_size):
    large_file_key = 1024
    for key in IMAGE_WIDTHS:
        if file_size <= key:
            return IMAGE_WIDTHS[key]
        else:
            return IMAGE_WIDTHS[large_file_key]


# Making Sure Directories Exist
DIRECTORIES = [
    IMAGE_DIRECTORIES["BASE_IMAGE_DIR"],
    IMAGE_DIRECTORIES["DEC_IMAGE_DIR"],
    SPECTRAL_DIRECTORIES["SPRECTRAL_IMAGE_DIR"],
    MODEL_DIRECTORIES["SAVED_MODELS_DIR"],
]
