# Standard Library Imports
import io
import os
import sys
from shutil import copyfile

# Conda Imports
import pandas as pd

# Project Defined Imports
from Malware_Imaging.config import (
    DATA_DIRECTORIES,
    IMAGE_DIRECTORIES,
    SPECTRAL_DIRECTORIES,
)


def get_labels_df():
    labels_df = pd.read_csv(DATA_DIRECTORIES["LABELS"])
    return labels_df


def get_unique_families():
    labels_df = get_labels_df()
    unique_families = labels_df.family.unique()
    return unique_families


def get_family_paths():
    unique_families = get_unique_families()
    family_root = os.path.abspath(
        os.path.join(IMAGE_DIRECTORIES["BASE_IMAGE_DIR"], "families")
    )
    if not os.path.isdir(family_root):
        os.mkdir(family_root)
    family_dir_paths = [
        os.path.abspath(os.path.join(family_root, family)) for family in unique_families
    ]
    return family_dir_paths


def build_family_dirs():
    family_dir_paths = get_family_paths()

    for dir in family_dir_paths:
        if not os.path.isdir(dir):
            os.mkdir(dir)


def copy_images_to_family_dir():
    # Getting Source Paths
    image_paths = IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"]
    spectral_paths = SPECTRAL_DIRECTORIES["SPECTRAL_IMAGE_PATHS"]
    family_root = os.path.abspath(
        os.path.join(IMAGE_DIRECTORIES["BASE_IMAGE_DIR"], "families")
    )

    # Getting Family Label for Each Hash
    labels_df = get_labels_df()
    image_labels = [
        (labels_df.loc[labels_df["hash"] == name]["family"].iloc[0])
        for name in IMAGE_DIRECTORIES["TARGET_FILE_NAMES"]
    ]
    for img, spectral, family in zip(image_paths, spectral_paths, image_labels):
        family_dir = os.path.abspath(os.path.join(family_root, family))
        dest_img = os.path.abspath(os.path.join(family_dir, os.path.basename(img)))
        dest_spectral = os.path.abspath(
            os.path.join(
                family_dir,
                os.path.splitext(os.path.basename(spectral))[0] + "-SPECTRAL.png",
            )
        )
        copyfile(img, dest_img)
        copyfile(spectral, dest_spectral)
