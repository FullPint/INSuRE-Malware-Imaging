# Standard Library Imports
import io
import os
import sys

# Conda Imports
import numpy as np
import cv2 as cv

# Project Defined Imports
from Malware_Imaging.config import IMAGE_DIRECTORIES


# compresses images to 56x56px
def img_to_compressed():
    FILE_SIZE = [
        os.path.getsize(file) * 0.001
        for file in IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"]
    ]
    TOTAL_SIZE = sum(FILE_SIZE)
    completed = 0
    for file, path, size in zip(
        IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"],
        IMAGE_DIRECTORIES["COMPRESSED_IMAGE_PATHS"],
        FILE_SIZE,
    ):
        if path:
            img = cv.imread(file, 0)
            compressed_image = cv.resize(img, (56,56))
            cv.imwrite(path, compressed_image)
        completed += size
        done = int(50 * completed / TOTAL_SIZE)
        sys.stdout.write(
            "\r[{}{}] {}%".format(
                "█" * done, "." * (50 - done), int(100 * completed / TOTAL_SIZE)
            )
        )
        sys.stdout.flush()
    sys.stdout.write("\n")


# compresess or interpolates images to 910x910px
def img_to_median():
    FILE_SIZE = [
        os.path.getsize(file) * 0.001
        for file in IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"]
    ]
    TOTAL_SIZE = sum(FILE_SIZE)
    completed = 0
    for file, path, size in zip(
        IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"],
        IMAGE_DIRECTORIES["MEDIAN_IMAGE_PATHS"],
        FILE_SIZE,
    ):
        if path:
            img = cv.imread(file, 0)
            median_image = cv.resize(img, (910,910))
            cv.imwrite(path, median_image)
        completed += size
        done = int(50 * completed / TOTAL_SIZE)
        sys.stdout.write(
            "\r[{}{}] {}%".format(
                "█" * done, "." * (50 - done), int(100 * completed / TOTAL_SIZE)
            )
        )
        sys.stdout.flush()
    sys.stdout.write("\n")


# interpolates images to 5,774x5,774px
def img_to_expanded():
    FILE_SIZE = [
        os.path.getsize(file) * 0.001
        for file in IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"]
    ]
    TOTAL_SIZE = sum(FILE_SIZE)
    completed = 0
    for file, path, size in zip(
        IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"],
        IMAGE_DIRECTORIES["EXPANDED_IMAGE_PATHS"],
        FILE_SIZE,
    ):
        if path:
            img = cv.imread(file, 0)
            expanded_image = cv.resize(img, (5774,5774))
            cv.imwrite(path, expanded_image)
        completed += size
        done = int(50 * completed / TOTAL_SIZE)
        sys.stdout.write(
            "\r[{}{}] {}%".format(
                "█" * done, "." * (50 - done), int(100 * completed / TOTAL_SIZE)
            )
        )
        sys.stdout.flush()
    sys.stdout.write("\n")


def img_to_squares():
    print("Attempting conversion to compressed...\n")
    img_to_compressed()
    print("Attempting conversion to median...\n")
    img_to_median()
    print("Attempting conversion to expanded...\n")
    img_to_expanded()