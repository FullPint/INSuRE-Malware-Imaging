# Standard Library Imports
import glob
import io
import os
import sys

# Conda Imports
import numpy as np
import cv2 as cv

# Project Defined Imports
from Malware_Imaging.config import DATA_DIRECTORIES, IMAGE_DIRECTORIES, get_image_width


def dec_to_img():
    # Declaring Imgae Widths, and FILE SIZE for Each File
    FILE_SIZE = [
        os.path.getsize(file) * 0.001 for file in DATA_DIRECTORIES["DEC_FILES"]
    ]
    TOTAL_SIZE = sum(FILE_SIZE)
    IMAGE_WIDTH = [get_image_width(size) for size in FILE_SIZE]
    completed = 0
    print("Converting Decimal Files to Images")
    for size, width, file, path in zip(
        FILE_SIZE,
        IMAGE_WIDTH,
        DATA_DIRECTORIES["DEC_FILES"],
        IMAGE_DIRECTORIES["MALWARE_DEC_IMAGES_PATHS"],
    ):
        vector = []
        with io.open(file, mode="r") as f:
            for line in f:
                vector.extend([digit for digit in line.split()])
            padding = width - (len(vector) % width)
            vector.extend(padding * ["000"])
            height = int(len(vector) / width)
            array_2D = np.array(vector, dtype=np.float32).reshape((height, width))
            cv.imwrite(path, array_2D)
            completed += size
            done = int(50 * completed / TOTAL_SIZE)
        sys.stdout.write(
            "\r[{}{}] {}%".format(
                "â–ˆ" * done, "." * (50 - done), int(100 * completed / TOTAL_SIZE)
            )
        )
        sys.stdout.flush()
    sys.stdout.write("\n")
