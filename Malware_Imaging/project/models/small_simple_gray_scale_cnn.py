# Conda Imports
from keras import optimizers
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Activation, Dropout
from keras.preprocessing.image import ImageDataGenerator


# User Defined Imports
from Malware_Imaging.project.models.models_config import (
    images_with_labels,
    DEFAULT_INPUT_SIZES,
)

# Ditionary for base settings of image generator
train_gen_settings = {
    # Set to false -- using ZCA wich will override
    "featurewise_center": False,
    # Set to false -- using ZCA wich will override
    "samplewise_center": False,
    # Set to false -- using ZCA wich will override
    "featurewise_std_normalization": False,
    # Set to false -- using ZCA wich will override
    "samplewise_std_normalization": False,
    # Setting to True Attempting To Highlight Patterns
    # May Set To False in the Future
    "zca_whitening": False,
    "zca_epsilon": 1e-06,
    # Set to Zero, The Domain Does not Expect Rotations
    "rotation_range": 0,
    # Setting Width and Height as Malware Might Have Changing Size
    # And We Horistically Defined Widths For Original Conversion
    # This Gives Some Lee-way
    "width_shift_range": 0.2,
    "height_shift_range": 0.2,
    # Dont Believe Brightness Range Should be Affected in our Domain
    "brightness_range": None,
    # Dont Believe Shear Range Should be Affected in our Domain
    "shear_range": 0.0,
    # Dont Zoom  Range Should be Affected in our Domain
    "zoom_range": 0.0,
    # Base is for Grayscale -- Leaving Alone
    "channel_shift_range": 0.0,
    # Lancoz is chosed as our interpolater but may change in the future
    "fill_mode": "nearest",
    # Fill Mode is not Constant, Doesn't Matter
    "cval": 0.0,
    # Dont Believe Horizontal Flips Should be Affected in our Domain
    "horizontal_flip": False,
    # Dont Believe Vertiacal Flips Should be Affected in our Domain
    "vertical_flip": False,
    # Rescaling our values to be set bettween 0 and 1
    "rescale": (1.0 / 255),
    # Currently No Function Set
    "preprocessing_function": None,
    # Current format is already Default
    "data_format": None,
    # 20%
    "validation_split": 0.2,
    # Leaving as none dor now
    "dtype": None,
}

valid_gen_settings = {
    # Lancoz is chosed as our interpolater but may change in the future
    "fill_mode": "nearest",
    # Rescaling our values to be set bettween 0 and 1
    "rescale": (1.0 / 255),
    # Keeping constant
    "validation_split": 0.2,
}

# Dictionary for base flow settings
train_flow_settings = {
    "dataframe": images_with_labels,
    "x_col": "image_path",
    "y_col": "family",
    "target_size": DEFAULT_INPUT_SIZES["SMALL-GRAY"][0:2],
    "color_mode": "grayscale",
    "classes": None,
    "class_mode": "categorical",
    "batch_size": 32,
    "shuffle": True,
    "seed": 1,
    "save_to_dir": None,
    "save_prefix": "",
    "save_format": "png",
    "subset": "training",
    "interpolation": "nearest",
    "drop_duplicates": True,
}
valid_flow_settings = train_flow_settings
valid_flow_settings["subset"] = "validation"

# Creating our generator, and the iterator for training
train_gen = ImageDataGenerator(**train_gen_settings)
# train_gen.fit()
valid_gen = ImageDataGenerator(**valid_gen_settings)
train_generator = train_gen.flow_from_dataframe(**train_flow_settings)
valid_generator = valid_gen.flow_from_dataframe(**valid_flow_settings)

# Initializng our model
model = Sequential()
model.add(
    Conv2D(32, (3, 3), padding="same", input_shape=DEFAULT_INPUT_SIZES["SMALL-GRAY"])
)
model.add(Activation("relu"))
model.add(Conv2D(32, (3, 3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(Conv2D(64, (3, 3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(10, activation="softmax"))

model.compile(
    optimizers.rmsprop(lr=0.0001), loss="categorical_crossentropy", metrics=["accuracy"]
)
STEP_SIZE_TRAIN = train_generator.batch_size
STEP_SIZE_VALID = valid_generator.batch_size
model.fit_generator(
    generator=train_generator,
    steps_per_epoch=STEP_SIZE_TRAIN,
    validation_data=valid_generator,
    validation_steps=STEP_SIZE_VALID,
    epochs=10,
)


"""import pandas as pd
df=pd.read_csv(r".\train.csv")
datagen=ImageDataGenerator(rescale=1./255)
train_generator=datagen.flow_from_dataframe(dataframe=df, directory=".\train_imgs", x_col="id", y_col="label", class_mode="categorical", target_size=(32,32), batch_size=32)
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=(32,32,3)))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

model.compile(optimizers.rmsprop(lr=0.0001,
loss="categorical_crossentropy", metrics=["accuracy"])
STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size
STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size
model.fit_generator(generator=train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    validation_data=valid_generator,
                    validation_steps=STEP_SIZE_VALID,
                    epochs=10)"""
