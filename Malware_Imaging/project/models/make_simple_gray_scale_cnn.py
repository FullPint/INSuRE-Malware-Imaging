# Standard Library Imports
import os
from datetime import datetime

# Conda Imports
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Activation, Dropout
from keras import optimizers
from keras.callbacks import EarlyStopping, CSVLogger
from keras.utils import plot_model


# User Defined Imports
from Malware_Imaging.config import MODEL_DIRECTORIES

# Need to rename to just make_simple_cnn and repurpose to other files
def make_simple_gray_scale_cnn(
    input_size,
    model_name,
    train_gen_settings,
    valid_gen_settings,
    train_flow_settings,
    valid_flow_settings,
):
    # Creating our generator, and the iterator for training
    train_gen = ImageDataGenerator(**train_gen_settings)
    valid_gen = ImageDataGenerator(**valid_gen_settings)
    train_generator = train_gen.flow_from_dataframe(**train_flow_settings)
    valid_generator = valid_gen.flow_from_dataframe(**valid_flow_settings)

    # Initializng our model
    model = Sequential()
    model.add(Conv2D(32, (3, 3), padding="same", input_shape=input_size))
    model.add(Activation("relu"))
    model.add(Conv2D(32, (3, 3)))
    model.add(Activation("relu"))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Conv2D(64, (3, 3), padding="same"))
    model.add(Activation("relu"))
    model.add(Conv2D(64, (3, 3)))
    model.add(Activation("relu"))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Flatten())
    model.add(Dense(512))
    model.add(Activation("relu"))
    model.add(Dropout(0.5))
    model.add(Dense(124, activation="softmax"))

    model.compile(
        optimizers.Adam(), loss="categorical_crossentropy", metrics=["accuracy"]
    )
    STEP_SIZE_TRAIN = train_generator.batch_size
    STEP_SIZE_VALID = valid_generator.batch_size

    # Call Back To Stop Model
    early_stopper = EarlyStopping(
        monitor="val_loss",
        mode="auto",
        verbose=1,
        patience=100,
        restore_best_weights=True,
    )

    # Call Back To Log Epoch Results
    csv_logger = CSVLogger(
        os.path.abspath(
            os.path.join(MODEL_DIRECTORIES["SAVED_MODELS_DIR"], model_name + ".csv")
        )
    )

    model.fit_generator(
        generator=train_generator,
        steps_per_epoch=STEP_SIZE_TRAIN,
        validation_data=valid_generator,
        validation_steps=STEP_SIZE_VALID,
        epochs=1000,
        callbacks=[early_stopper, csv_logger],
    )
    # Naming and Saving The Model
    model_path = os.path.abspath(
        os.path.join(
            MODEL_DIRECTORIES["SAVED_MODELS_DIR"],
            model_name + str(datetime.now()) + ".h5",
        )
    )
    image_path = os.path.abspath(
        os.path.join(
            MODEL_DIRECTORIES["SAVED_MODELS_DIR"],
            model_name + str(datetime.now()) + ".png",
        )
    )
    plot_model(model, to_file=image_path)
    model.save(model_path)
